<apex:page sidebar="false" showHeader="true" controller="SetupController" title="DocuSign Unified App Setup">
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <apex:includeLightning/>
    <apex:slds/>
    <apex:includeScript value="{!$Resource.stringUtils}"/>

    <style type="text/css">
        .bodyDiv .outerNoSidebar,
        .noSidebarCell,
        .sidebarCell .fixed {
            padding: 0;
        }

        .noSidebarCell #ds-spinner {
            height: calc(100vh - 165px);
        }

        .ds-blue-brand {
            background: rgb(176, 196, 223);
            background-image: url(/_slds/images/themes/lightning_blue/lightning_blue_background.png);
            background-repeat: repeat-x;
        }

    </style>

    <div id="ds-pageContent" style="display: none;" class="ds-blue-brand">
        <div id="ds-unifiedAppSetupSection"></div>
    </div>

    <div id="ds-spinner">
        <div role="status" class="slds-spinner slds-spinner_medium slds-spinner_brand">
            <div class="slds-spinner__dot-a"></div>
            <div class="slds-spinner__dot-b"></div>
        </div>
    </div>


    <script type="text/javascript">
      var navigateToURL = function (event) {

        var url = event.getParam('url');
        window.open(url, '_blank');
      };
      function showError(component, message) {
        var evt = component.getEvent('toastEvent');
        evt.setParams({
          show: true, message: message, mode: 'error'
        });
        evt.fire();
      }

      function beginOAuth(component, environment, otherUrl) {
        try {
          Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SetupController.beginOAuth}', window.location.origin, environment, otherUrl, function (result, event) {
            if (event && event.status) {
              var width = 600;
              var height = 600;
              var left = (screen.width / 2) - (width / 2);
              var top = (screen.height / 2) - (height / 2);

              var w = window.open(stringUtils.unescapeHtml(result), 'oauth', 'width=' + width + ',height=' + height + ',left=' + left + ',top=' + top);

              var onMessage = function (event) {
                if (event.origin === window.location.origin) {
                  window.removeEventListener('message', onMessage);
                  var evt = component.getEvent('oauthEvent');
                  evt.setParams({
                    response: event.data.response, loginInformation: event.data.loginInformation
                  });
                  evt.fire();
                }
              };

              var closeTimer = setInterval(function () {
                if (w.closed) {
                  clearInterval(closeTimer);
                  var evt = component.getEvent('loadingEvent');
                  evt.setParams({
                    isLoading: false
                  });
                  evt.fire();
                }
              }, 500);

              window.addEventListener('message', onMessage);
              w.focus();
            } else {
              showError(component, event.message);
            }
          });
        } catch (err) {
          showError(component, err);
        }
      }

      function beginSpringOAuth(component) {
        try {
          var state = window.location.host;
          Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.SetupController.beginSpringOAuth}', state, function (result, event) {
            if (event && event.status) {
              window.endSpringOAuth = function (response, loginInformation) {
                var evt = component.getEvent('springOauthEvent');
                evt.setParams({
                  response: response, loginInformation: loginInformation
                });
                evt.fire();
              };

              var width = 600;
              var height = 600;
              var left = (screen.width / 2) - (width / 2);
              var top = (screen.height / 2) - (height / 2);

              var w = window.open(stringUtils.unescapeHtml(result), 'oauth', 'width=' + width + ',height=' + height + ',left=' + left + ',top=' + top);

              var closeTimer = setInterval(function () {
                if (w.closed) {
                  clearInterval(closeTimer);
                  var evt = component.getEvent('loadingEvent');
                  evt.setParams({
                    isLoading: false
                  });
                  evt.fire();
                }
              }, 500);

            } else {
              showError(component, event.message);
            }
          });
        } catch (err) {
          showError(component, err);
        }
      }

      function showSetupComponent() {
        document.getElementById('ds-spinner').style.display = 'none';
        document.getElementById('ds-pageContent').style.display = 'block';
      }

      function showSetupSpinner() {
        document.getElementById('ds-spinner').style.display = 'block';
        document.getElementById('ds-pageContent').style.display = 'none';
      }

      $Lightning.use('{!JSENCODE(namespace)}:SetupApp', function () {
        $Lightning.createComponent('{!JSENCODE(namespace)}:Setup', {
          beginOAuth: beginOAuth,
          beginSpringOAuth: beginSpringOAuth,
          showSetupComponent: showSetupComponent,
          showSetupSpinner: showSetupSpinner
        }, 'ds-unifiedAppSetupSection', function (component, status, errorMessage) {
          //TODO: add the logic for handling component instantiation errors
          if (null == errorMessage) {
          }
          $A.eventService.addHandler({'event': 'force:navigateToURL', 'handler': navigateToURL});
        });
      });
    </script>

    </html>
</apex:page>
